简历板块：项目经验，工作经历
采集策略：
持久化可视化
采集规模


快速解决问题型（快速响应）
抠代码周期（一周或两周）



项目急: 先用自动化se, rpc先把数据抓出来，然后再采取解密


定位经验一般流程：
	拿到一个网站, 首先尝试参数重放攻击，然后改参的方式处理模拟请求，把看上去不太正常的都删掉	

	
1. 跟值: 把需要处理的东西传进了下一个要执行的位置，这个执行的位置需要跟一下，因为不确定传进去之后有没有进行处理
   向上找堆栈，堆栈中值跟丢的情况下，在跟丢的位置前面打上断点，然后观察值的情况变化
	

2.拿到网站，
找准数据接口，一次性会加载很多数据接口，拿到数据页的数据依次对接口进行全局搜索（避免缺少东西，在控制台打开的情况下 ctrl + F5（不缓存刷新） 搜索）

首先确定cookie, 把没用的都删掉；然后对接口进行重放攻击;
重发正常, 删除参数异常，也就是跟我们删除参数有关
确定这个值需不要逆，关键参数处理【找接口/固定值/set-cookie(一定要优先！优先！优先！)/js逆向】

优先搜索需要逆向长度长的参数

补代码的时候(从外往里，从里往外)：
更希望我们的上下文，是按照控制流的走向去抠


3.遇到ajax, 优先找beforSend， 返回数据加密找complete 


***
4.调试的时候尽量保持参数一致，即使跟断了也要参数保持一致
进入函数之后需要打上断点，并且让断点走到打上的断点这里，否则会有作用域问题


5.确定一个函数需不需要跟，看传的值是不是你需要的(或者说涉及到必要参数的函数运算)，即使这个函数什么都不做依然要跟，因为你不确定它里面做了什么
  还可以看一下函数传进去的是什么， 函数返回的是什么，和我们要跟的参数有没有关系
  如果函数原样传进去的参数，将值原样返回来(这个函数大概率可以不跟)	
	
6.
var decrypted = CryptoJS.AES.decrypt(str, key, {
                   // iv: iv,
                   mode: CryptoJS.mode.ECB,
                   padding: CryptoJS.pad.Pkcs7,
    })
第三个参数是一个对象，对象两个key的值还是对象，
这种情况下怎么补：
	1：对象两个key的值先给它置空对象，出问题再去补
	2：因为第三个参数是对象，对象不参与计算（一定是对象里面某个方法、属性参与计算），直接给它置空对象或者直接不传这个参数，出问题再去补  --------(优先)
	【把有问题的地方注释做唯一标识，方便搜索】

	 
7. 改写需要注意的是
	1)this相关 
	2)传参没丢
	3)没有计算 

8. 找函数入口最快最简单的方法是拿到关键字优先全局搜索，没有的话再说


9. 参数加密：参数是请求之前发生的，xhr断点的时候参数加密已经生成了，应该向上找堆栈。
   结果加密：解密过程是请求之后发生的，xhr断点的时候加密过程还没有发生，所以应该向下找堆栈。

	
10. new 的构造函数里面的this不用去补，new对象的初始化操作


11. 如果一个参数已经赋值了，紧接着有个逻辑假设这个参数值不存在又对它重新赋值，
    这种情况下，我们本地改写直接不给参数赋值，让它去走这个赋值逻辑，然后拿本地运行结果去对比看是否一致
	
	
12.混淆跟代码注意，首先把断点放在js代码第一行，不能让代码自己的debugger去断住，并不是我们的所期待的
   要让代码走我们自己打的断点，而不是代码控制debugger位置
   *注意：动态的js打断点，能不能打中，能打中，打中之后会乱的可能性比较大；技巧是建议是打`script`断点然后刷新页面，刷新之后可能断到别的位置，第一种可能是cookie有效，没有清除cookie，第二种就是断到谷歌浏览器插件上(因为谷歌浏览器插件会优先加载js)
   
   
13. *hook之后; 在hook住设置cookie的地方找前一个堆栈，在堆栈之前下断点，尽量往前下断点(或者打在当前调用栈(函数)的第一行然后单步向下走)


14. axios 异步请求库，跟代码处理在lesson10后半节课(大概后25)


15.console.log被重写
	深拷贝console.log，_console = Object.assign(console), 切断内存指向的关系 