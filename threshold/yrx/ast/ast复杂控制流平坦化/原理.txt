如果我们想完整的还原控制流，就得想办法找到它的顺序
举例：

(function (e) {
    var f = 5;
    for (; ;) if (f < 4) {
        if (f < 2) {
            if (f < 1) {
                console.log(111);
                f += 7
            } else {
                if (a.a) f += 2; else f -= 1
            }
        } else {
            if (f < 3) {
                f += 4
            } else {
                console.log(333);
                f -= 1
            }
        }
    } else {
        if (f < 6) {
            if (f < 5) {
                return
            } else {
                var l = function (f) {
                    var l = e || 0;
                    for (; ;) return
                };
                f -= 4
            }
        } else {
            if (f < 7) {
                f -= 2
            } else {
                f -= 1
            }
        }
    }
})();


这段代码中，有一块儿是判断的东西：
if (a.a) f += 2; else f -= 1
之后涉及的就是对控制流标识的修改

当然了，这个比较简单，我们还是可以依靠全局的【控制流  f】 将其还原
但是，基于这个原理，当控制流标识符足够复杂， 流程足够多的时候，我们还原控制流的难度就会呈指数型上升。所以会给还原创造非常大的麻烦

那么，一般来讲，在AST里面，进行控制流还原，大多会采取一种【取巧】但【有效】的方法，即：插桩

必须要保证插桩是对的。  必须是在正常的浏览器 以及正常的页面中去执行代码


还是刚才那段代码，我们明显的可以看出，是依靠控制器 ”f“ 控制的流程，那么，其实我们只需要找到类似的这种控制器。然后在控制器的最前面插桩
就可以得到一段控制数组。我们依靠这个控制数组就可以把代码还原

【请注意，这种还原方式虽然方便，但是风险也是比较高的，因为会缺失所有的判断分支和不走的代码，可能会产生大量风控的风险。 不过这种方法也可以提升代码执行效率
所以这种取巧好坏参半。但是最重要的一点就是，必须保证自己的插桩是正确的，没有走到蜜罐中来，否则还原就会白费功夫】

那么我们尝试还原一下

首先其实我们是有还原OB控制流平坦化经验的
所以，我们不以 switch case 为例。因为这是重复之前的工作

我们要看，复杂的判断如何还原成 switch (或者是类似 switch的情况)

免责声明：AST思想才重要，方法不重要。因为混淆五花八门，很难有通解

看 input js的内容：


疯狂找规律（一定要耐心，因为混淆也是规律混淆，所以我们反混淆也是找规律反混）

1.  if 的 else 如果没有继续承接 if，那else 等于 if 判断右边的值

    举例： if (f < 5) {if(f < 4)...} else {...}

    else 里面没有直接承接  else{if(f.....)}, 所以 else 实际上就是 f -----> case 4


2.  对于  if 里面直接没有承接的情况

    例  if (f < 7) {...} else {...}

    一直找祖宗节点，直到找到 第一次的else 分支的 if，这个 if 判断右边的值 就是 case 的值  实际 f的值

3.  使用 enter 还是 exit


4.  如何替换掉节点与中间变量的存储

    看自己了，我会利用中转的方式，以便于大家理解




课程最后的思考：

    1. 课后请将代码完全还原完毕
    2. 尝试自动化插桩（尽管它不是必要的）
    3. 尝试不利用插桩还原代码（盯住 var i = e || 0（类似这种），之后从入口找下去即可，最后通过控制器修改代码来判断执行顺序即可）【本题中此需求非常简单】
    4. 尝试清空其余还原后的无用代码（包括控制器，无效引用等等）