【尝试抠代码（其实用到了一定的补环境思路）】
会用到闭包的思想：
function a(b){
    return (function(){
        return (function(a, b, c){
            function d(){
                return c + 6000; // 假装返回的是我们需要的关键密文
            }
            function e(){
            }
            console.log(d())
            document.createElement('canvas') // 假装进行样式渲染以及业务代码等不重要内容
        })(100, 1000, 10000)
    })(1, 2, 3)
}
a()

我们可以对它进行一定的改造，把闭包的 d函数突到全局使用

function a(b){
    return (function(){
        return (function(a, b, c){
            function d(){
                return c + 6000; // 假装返回的是我们需要的关键密文
            }
            function e(){
            }
            window.yrx = d;    // 将函数暴露给全局
            document.createElement('canvas')  // 假装进行样式渲染以及业务代码等不重要内容
            [0][1][2];
        })(100, 1000, 10000)
    })(1, 2, 3)
}
a()


使用这个技巧是有严格限制条件的

    代码控制流必须走到全局变量吐出位置 即 window.yrx = d; （后面的就算报错也可以完全不管,不影响。 但是之前报错不行）
    PS：如果吐出位置之前有环境检测等各种检测的话，也没有办法绕过。它只是一种改变变量令其全局吐出的方法而已

    懂了这基础知识，我们开始操作上面的代码，
    为了让我们方便一些，我们使用  node --inspect-brk 去调试 node.js
    inspect我在基础课讲过了，这里再强调一次。 inspect是一个能够利用chrome浏览器调试 node.js 的工具。在node.js环境下，就可以进行舒服的调试。

    当然了，这个工具在打断点等这种方面，多少还是有一些弊端的。比如断点丢失之类的。也是没有办法的事情，不过不影响我们整体的调试。

    ***
    1. 首先，我们必须要稍微读一下js代码（不用细致的去读），看一下这些代码是否满足我们的条件，如果不满足的话。我们就得稍微处理一下，让它满足
    【注意满足条件：让代码控制流走到我们要的位置相关函数就行，**不用完全走完整个流程**】
    2. 该处理处理，该写死写死，该截断截断 (*注意配合网站真实的逻辑、流程)